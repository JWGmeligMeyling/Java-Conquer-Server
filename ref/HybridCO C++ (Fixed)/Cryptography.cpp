#include "StdAfx.h"
#include "Cryptography.h"

//
// ------ CPasswordCryptography Implementation ------
//
// REMOVED
//
//
// ------ CAuthCryptography Implementation ------
//
// Static Key Decleration
const unsigned char Key1[] = 
{
	0x9D, 0x90, 0x83, 0x8A, 0xD1, 0x8C, 0xE7, 0xF6, 0x25, 0x28, 0xEB, 0x82, 0x99, 0x64, 0x8F, 0x2E,
	0x2D, 0x40, 0xD3, 0xFA, 0xE1, 0xBC, 0xB7, 0xE6, 0xB5, 0xD8, 0x3B, 0xF2, 0xA9, 0x94, 0x5F, 0x1E, 
	0xBD, 0xF0, 0x23, 0x6A, 0xF1, 0xEC, 0x87, 0xD6, 0x45, 0x88, 0x8B, 0x62, 0xB9, 0xC4, 0x2F, 0x0E, 
	0x4D, 0xA0, 0x73, 0xDA, 0x01, 0x1C, 0x57, 0xC6, 0xD5, 0x38, 0xDB, 0xD2, 0xC9, 0xF4, 0xFF, 0xFE, 
	0xDD, 0x50, 0xC3, 0x4A, 0x11, 0x4C, 0x27, 0xB6, 0x65, 0xE8, 0x2B, 0x42, 0xD9, 0x24, 0xCF, 0xEE, 
	0x6D, 0x00, 0x13, 0xBA, 0x21, 0x7C, 0xF7, 0xA6, 0xF5, 0x98, 0x7B, 0xB2, 0xE9, 0x54, 0x9F, 0xDE, 
	0xFD, 0xB0, 0x63, 0x2A, 0x31, 0xAC, 0xC7, 0x96, 0x85, 0x48, 0xCB, 0x22, 0xF9, 0x84, 0x6F, 0xCE, 
	0x8D, 0x60, 0xB3, 0x9A, 0x41, 0xDC, 0x97, 0x86, 0x15, 0xF8, 0x1B, 0x92, 0x09, 0xB4, 0x3F, 0xBE, 
	0x1D, 0x10, 0x03, 0x0A, 0x51, 0x0C, 0x67, 0x76, 0xA5, 0xA8, 0x6B, 0x02, 0x19, 0xE4, 0x0F, 0xAE, 
	0xAD, 0xC0, 0x53, 0x7A, 0x61, 0x3C, 0x37, 0x66, 0x35, 0x58, 0xBB, 0x72, 0x29, 0x14, 0xDF, 0x9E, 
	0x3D, 0x70, 0xA3, 0xEA, 0x71, 0x6C, 0x07, 0x56, 0xC5, 0x08, 0x0B, 0xE2, 0x39, 0x44, 0xAF, 0x8E, 
	0xCD, 0x20, 0xF3, 0x5A, 0x81, 0x9C, 0xD7, 0x46, 0x55, 0xB8, 0x5B, 0x52, 0x49, 0x74, 0x7F, 0x7E, 
	0x5D, 0xD0, 0x43, 0xCA, 0x91, 0xCC, 0xA7, 0x36, 0xE5, 0x68, 0xAB, 0xC2, 0x59, 0xA4, 0x4F, 0x6E, 
	0xED, 0x80, 0x93, 0x3A, 0xA1, 0xFC, 0x77, 0x26, 0x75, 0x18, 0xFB, 0x32, 0x69, 0xD4, 0x1F, 0x5E, 
	0x7D, 0x30, 0xE3, 0xAA, 0xB1, 0x2C, 0x47, 0x16, 0x05, 0xC8, 0x4B, 0xA2, 0x79, 0x04, 0xEF, 0x4E, 
	0x0D, 0xE0, 0x33, 0x1A, 0xC1, 0x5C, 0x17, 0x06, 0x95, 0x78, 0x9B, 0x12, 0x89, 0x34, 0xBF, 0x3E
};
const unsigned char Key2[] =
{
	0x62, 0x4F, 0xE8, 0x15, 0xDE, 0xEB, 0x04, 0x91, 0x1A, 0xC7, 0xE0, 0x4D, 0x16, 0xE3, 0x7C, 0x49,
	0xD2, 0x3F, 0xD8, 0x85, 0x4E, 0xDB, 0xF4, 0x01, 0x8A, 0xB7, 0xD0, 0xBD, 0x86, 0xD3, 0x6C, 0xB9,
	0x42, 0x2F, 0xC8, 0xF5, 0xBE, 0xCB, 0xE4, 0x71, 0xFA, 0xA7, 0xC0, 0x2D, 0xF6, 0xC3, 0x5C, 0x29,
	0xB2, 0x1F, 0xB8, 0x65, 0x2E, 0xBB, 0xD4, 0xE1, 0x6A, 0x97, 0xB0, 0x9D, 0x66, 0xB3, 0x4C, 0x99,
	0x22, 0x0F, 0xA8, 0xD5, 0x9E, 0xAB, 0xC4, 0x51, 0xDA, 0x87, 0xA0, 0x0D, 0xD6, 0xA3, 0x3C, 0x09,
	0x92, 0xFF, 0x98, 0x45, 0x0E, 0x9B, 0xB4, 0xC1, 0x4A, 0x77, 0x90, 0x7D, 0x46, 0x93, 0x2C, 0x79,
	0x02, 0xEF, 0x88, 0xB5, 0x7E, 0x8B, 0xA4, 0x31, 0xBA, 0x67, 0x80, 0xED, 0xB6, 0x83, 0x1C, 0xE9,
	0x72, 0xDF, 0x78, 0x25, 0xEE, 0x7B, 0x94, 0xA1, 0x2A, 0x57, 0x70, 0x5D, 0x26, 0x73, 0x0C, 0x59,
	0xE2, 0xCF, 0x68, 0x95, 0x5E, 0x6B, 0x84, 0x11, 0x9A, 0x47, 0x60, 0xCD, 0x96, 0x63, 0xFC, 0xC9,
	0x52, 0xBF, 0x58, 0x05, 0xCE, 0x5B, 0x74, 0x81, 0x0A, 0x37, 0x50, 0x3D, 0x06, 0x53, 0xEC, 0x39,
	0xC2, 0xAF, 0x48, 0x75, 0x3E, 0x4B, 0x64, 0xF1, 0x7A, 0x27, 0x40, 0xAD, 0x76, 0x43, 0xDC, 0xA9,
	0x32, 0x9F, 0x38, 0xE5, 0xAE, 0x3B, 0x54, 0x61, 0xEA, 0x17, 0x30, 0x1D, 0xE6, 0x33, 0xCC, 0x19,
	0xA2, 0x8F, 0x28, 0x55, 0x1E, 0x2B, 0x44, 0xD1, 0x5A, 0x07, 0x20, 0x8D, 0x56, 0x23, 0xBC, 0x89,
	0x12, 0x7F, 0x18, 0xC5, 0x8E, 0x1B, 0x34, 0x41, 0xCA, 0xF7, 0x10, 0xFD, 0xC6, 0x13, 0xAC, 0xF9,
	0x82, 0x6F, 0x08, 0x35, 0xFE, 0x0B, 0x24, 0xB1, 0x3A, 0xE7, 0x00, 0x6D, 0x36, 0x03, 0x9C, 0x69,
	0xF2, 0x5F, 0xF8, 0xA5, 0x6E, 0xFB, 0x14, 0x21, 0xAA, 0xD7, 0xF0, 0xDD, 0xA6, 0xF3, 0x8C, 0xD9
};
//
// SetKeys Function
void CAuthCryptography::SetKeys(DWORD* inKey1, DWORD* inKey2)
{ 
	DWORD dwKey1 = ((*inKey1 + *inKey2) ^ 0x4321) ^ *inKey1;
	DWORD dwKey2 = (DWORD)(dwKey1 * dwKey1);
	Key3 = new unsigned char[256];
	Key4 = new unsigned char[256];

	const char dwKeyLoop = 256 / 4;
	for (char i = 0; i < dwKeyLoop; i++)
	{
		*(((DWORD*)Key3) + i) = dwKey1 ^ *(((DWORD*)Key1) + i);
		*(((DWORD*)Key4) + i) = dwKey2 ^ *(((DWORD*)Key2) + i);
	}
	Out.Counter = 0;
	UsingAlternate = true;
}
//
// Decrypt Function
void CAuthCryptography::Decrypt(void* in, void* out, int Length)
{
	unsigned char* pIn = (unsigned char*)in;
	unsigned char* pOut = (unsigned char*)out;
	for (int i = 0; i < Length; i++)
    {
		pOut[i] = (unsigned char)(pIn[i] ^ 0xAB);
		pOut[i] = (unsigned char)((pOut[i] << 4) | (pOut[i] >> 4));
		if (UsingAlternate)
		{
			pOut[i] = (unsigned char)(Key4[In.High] ^ pOut[i]);
			pOut[i] = (unsigned char)(Key3[In.Low] ^ pOut[i]);
		}
		else
		{
			pOut[i] = (unsigned char)(Key2[In.High] ^ pOut[i]);
			pOut[i] = (unsigned char)(Key1[In.Low] ^ pOut[i]);
		}
		In.Counter++;
     }
}
//
// Encrypt Function
void CAuthCryptography::Encrypt(void* in, void* out, int Length)
{
	unsigned char* pIn = (unsigned char*)in;
	unsigned char* pOut = (unsigned char*)out;
	for (int i = 0; i < Length; i++)
    {
		pOut[i] = (unsigned char)(pIn[i] ^ 0xAB);
        pOut[i] = (unsigned char)((pOut[i] << 4) | (pOut[i] >> 4));
        pOut[i] = (unsigned char)(Key2[Out.High] ^ pOut[i]);
        pOut[i] = (unsigned char)(Key1[Out.Low] ^ pOut[i]);
        Out.Counter++;
    }
}
//
// Ctor and Dtor
CAuthCryptography::CAuthCryptography(void)
{
	Key3 = NULL;
	Key4 = NULL;
	In.Counter = 0;
	Out.Counter = 0;
	UsingAlternate = false;
}
CAuthCryptography::~CAuthCryptography(void)
{
	if (Key3 != NULL)
		delete[] Key3;
	if (Key4 != NULL)
		delete[] Key4;
}
//
//CPasswordCryptography

//Static Key
const DWORD PasswordKey[] =
{
	0xebe854bc, 0xb04998f7, 0xfffaa88c, 0x96e854bb, 0xa9915556, 0x48e44110, 0x9f32308f, 0x27f41d3e, 0xcf4f3523,
	0xeac3c6b4, 0xe9ea5e03, 0xe5974bba, 0x334d7692, 0x2c6bcf2e, 0xdc53b74, 0x995c92a6, 0x7e4f6d77, 0x1eb2b79f,
	0x1d348d89, 0xed641354, 0x15e04a9d, 0x488da159, 0x647817d3, 0x8ca0bc20, 0x9264f7fe, 0x91e78c6c, 0x5c9a07fb,
	0xabd4dcce, 0x6416f98d, 0x6642ab5b
};

//Decrypt Method
void CPasswordCryptography::Decrypt(DWORD *Password)
{
	for (char i =1; i>= 0; i--)
	{
		DWORD num1 = Password[(i * 2) + 1];
		DWORD num2 = Password[i * 2];
		for (char j = 11;j>=0;j--)// i think it needa a closed bracket? 
		{
			num1 = ((DWORD)(Assembler::RollRight(num1 - PasswordKey[(j*2) +7],(char)num2,0x20)) ^ num2);
			num2 = ((DWORD)(Assembler::RollRight(num2 - PasswordKey[(j*2) +6],(char)num1,0x20)) ^ num1);
		}
		Password[(i * 2) + 1] = num1 - PasswordKey[5];
		Password[i * 2] = num2 - PasswordKey[4];
	}
}

int Assembler::RollRight(DWORD Value, char Roll, char Size)
{
	Roll = (char)(Roll & 0x1F);
	return (int)((Value << (Size - Roll)) | (Value >> Roll));
}
